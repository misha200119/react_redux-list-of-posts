{"version":3,"sources":["components/Loader/Loader.tsx","typedHooks/hooks.ts","api/api.ts","api/posts.ts","api/comments.ts","store/postDetailsSlice.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","store/listOfPostsSlice.ts","components/PostsList/PostsList.tsx","App.tsx","store/index.ts","index.tsx"],"names":["Loader","className","useAppDispatch","useDispatch","useAppSelector","useSelector","BASE_URL","getRequest","bodyRequest","a","fetch","response","ok","Error","status","text","json","postRequest","objInJSON","method","body","headers","deleteRequest","getUsersPosts","getUserPostsById","userId","getPostDetailsById","postId","getPostCommentsById","addPostCommentById","comment","JSON","stringify","removePostCommetById","commentId","fetchPostDetails","createAsyncThunk","thunkAPI","dispatch","setSelectedPostDetails","Promise","all","post","comments","setCommentsForSelectedPost","removeCommentInSelectedPostById","readonlyState","getState","filteredComments","postDetails","commentsForSelectedPost","filter","id","setSomeCommentIsDeleting","addCommentInSelectedPost","prevComments","length","createSlice","name","initialState","selectedPostDetails","someCommentIsDeleting","commentsIsShowing","reducers","state","action","payload","setCommentsIsShowing","extraReducers","builder","addCase","fulfilled","actions","selectors","NewCommentForm","selectedPostId","isUploadComment","email","initialError","useState","newComment","setNewComment","newCommentError","setNewCommentError","catchInpChange","useCallback","event","target","value","prev","catchSubmit","preventDefault","trim","validComment","Object","values","every","item","String","validErrors","some","onSubmit","type","placeholder","onChange","PostDetails","memo","useEffect","onClick","map","fetchUserPostsById","setIsPostListLoading","listOfPosts","posts","isPostListLoading","filterByUserId","setSelectedPostId","setFilterByUserId","PostsList","React","selectCommentBtnClickHandler","title","App","store","configureStore","reducer","listOfPostsReduser","postDetailsReducer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a258084.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getRequest = async (bodyRequest: string) => {\n  const response = await fetch(`${BASE_URL}${bodyRequest}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}| ${response.text}`);\n  }\n\n  return response.json();\n};\n\nexport const postRequest = async (bodyRequest: string, objInJSON: string) => {\n  await fetch(`${BASE_URL}${bodyRequest}`, {\n    method: 'POST',\n    body: objInJSON,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n};\n\nexport const deleteRequest = async (bodyRequest: string) => {\n  await fetch(`${BASE_URL}${bodyRequest}`, {\n    method: 'DELETE',\n  });\n};\n","import { Post } from '../types/Post';\nimport { getRequest } from './api';\n\nexport const getUsersPosts = async (): Promise<Array<Post>> => {\n  return getRequest('/posts');\n};\n\nexport const getUserPostsById\n  = async (userId: number): Promise<Array<Post>> => {\n    return getRequest(`/posts?userId=${userId}`);\n  };\n\nexport const getPostDetailsById = async (postId: number): Promise<Post> => {\n  return getRequest(`/posts/${postId}`);\n};\n","import { Comment } from '../types/Comment';\nimport { getRequest, postRequest, deleteRequest } from './api';\n\nexport const getPostCommentsById\n  = async (postId: number): Promise<Array<Comment>> => {\n    return getRequest(`/comments?postId=${postId}`);\n  };\n\nexport const addPostCommentById\n= async (\n  comment: Omit<Comment, 'id'>,\n): Promise<void> => {\n  return postRequest('/comments', JSON.stringify(comment));\n};\n\nexport const removePostCommetById\n= async (commentId: number): Promise<void> => {\n  return deleteRequest(`/comments/${commentId}`);\n};\n","// there I imported rootState from store because i use it in selectors for this inner state\n\n/* eslint-disable import/no-cycle */\n\n// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\n\n/* eslint-disable no-param-reassign */\n\n// i use action before initialization in thunk so i need it to off warning of linter\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '.';\nimport { getPostDetailsById } from '../api/posts';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport {\n  getPostCommentsById,\n  removePostCommetById,\n  addPostCommentById,\n} from '../api/comments';\n\ninterface PostDetailsState {\n  selectedPostDetails: Post | null;\n  commentsForSelectedPost: Array<Comment>;\n  someCommentIsDeleting: boolean;\n  commentsIsShowing: boolean;\n}\n\nconst initialState: PostDetailsState = {\n  selectedPostDetails: null,\n  commentsForSelectedPost: [],\n  someCommentIsDeleting: false,\n  commentsIsShowing: true,\n};\n\nexport const fetchPostDetails = createAsyncThunk(\n  'PostDetailsState/fetchUserPostsById',\n  async (postId: number, thunkAPI) => {\n    const { dispatch } = thunkAPI;\n\n    dispatch(setSelectedPostDetails(null));\n\n    const [post, comments] = await Promise.all([\n      getPostDetailsById(postId),\n      getPostCommentsById(postId),\n    ]);\n\n    dispatch(setSelectedPostDetails(post));\n    dispatch(setCommentsForSelectedPost(comments));\n  },\n);\n\nexport const removeCommentInSelectedPostById = createAsyncThunk(\n  'PostDetailsState/removeCommentInSelectedPostById',\n  async (commentId: number, thunkAPI) => {\n    const { dispatch } = thunkAPI;\n    const readonlyState = thunkAPI.getState() as RootState;\n    const filteredComments = readonlyState.postDetails.commentsForSelectedPost\n      .filter(comment => comment.id !== commentId);\n\n    dispatch(setSomeCommentIsDeleting(true));\n    await removePostCommetById(commentId);\n    dispatch(setCommentsForSelectedPost(filteredComments));\n    dispatch(setSomeCommentIsDeleting(false));\n  },\n);\n\nexport const addCommentInSelectedPost = createAsyncThunk(\n  'PostDetailsState/addCommentInSelectedPost',\n  async (comment: Omit<Comment, 'id'>, thunkAPI) => {\n    const { dispatch } = thunkAPI;\n    const readonlyState = thunkAPI.getState() as RootState;\n    const prevComments = readonlyState.postDetails.commentsForSelectedPost;\n    const filteredComments = [\n      ...prevComments,\n      { ...comment, id: prevComments.length + 1 }];\n\n    dispatch(setSomeCommentIsDeleting(true));\n    await addPostCommentById(comment);\n    dispatch(setCommentsForSelectedPost(filteredComments));\n    dispatch(setSomeCommentIsDeleting(false));\n  },\n);\n\nexport const postDetails = createSlice({\n  name: 'listOfPosts',\n  initialState,\n  reducers: {\n    setSelectedPostDetails: (state, action: PayloadAction<Post | null>) => {\n      state.selectedPostDetails = action.payload;\n    },\n\n    setCommentsForSelectedPost:\n    (state, action: PayloadAction<Array<Comment>>) => {\n      state.commentsForSelectedPost = action.payload;\n    },\n\n    setSomeCommentIsDeleting: (state, action: PayloadAction<boolean>) => {\n      state.someCommentIsDeleting = action.payload;\n    },\n\n    setCommentsIsShowing: (state, action: PayloadAction<boolean>) => {\n      state.commentsIsShowing = action.payload;\n    },\n  },\n\n  extraReducers: (builder) => {\n    builder.addCase(fetchPostDetails.fulfilled, () => {\n    });\n  },\n});\n\nexport const {\n  setSelectedPostDetails,\n  setCommentsForSelectedPost,\n  setSomeCommentIsDeleting,\n  setCommentsIsShowing,\n} = postDetails.actions;\n\nexport const selectors = {\n  getSelectedPostDetails: (state: RootState) => {\n    return state.postDetails.selectedPostDetails;\n  },\n\n  getCommentsForSelectedPost: (state: RootState) => {\n    return state.postDetails.commentsForSelectedPost;\n  },\n\n  getSomeCommentIsDeleting: (state: RootState) => {\n    return state.postDetails.someCommentIsDeleting;\n  },\n\n  getCommentsIsShowing: (state: RootState) => {\n    return state.postDetails.commentsIsShowing;\n  },\n};\n\nexport default postDetails.reducer;\n","import {\n  FC,\n  ChangeEvent,\n  FormEvent,\n  useCallback,\n  useState,\n} from 'react';\nimport { Loader } from '../Loader';\nimport {\n  useAppDispatch,\n  useAppSelector,\n} from '../../typedHooks/hooks';\nimport {\n  selectors,\n  addCommentInSelectedPost,\n} from '../../store/postDetailsSlice';\n\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const NewCommentForm: FC<Props> = ({\n  selectedPostId,\n}) => {\n  const dispatch = useAppDispatch();\n  const isUploadComment = useAppSelector(selectors.getSomeCommentIsDeleting);\n  const initialState = {\n    postId: selectedPostId,\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const initialError = {\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const [newComment, setNewComment] = useState(initialState);\n  const [newCommentError, setNewCommentError] = useState(initialError);\n\n  const catchInpChange = useCallback(async (\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { value, name } = event.target;\n\n    setNewComment(prev => ({ ...prev, [name]: value, postId: selectedPostId }));\n  }, [selectedPostId, newComment]);\n\n  const catchSubmit = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n    setNewCommentError({ ...initialError });\n\n    if (!newComment.name.trim()) {\n      setNewCommentError(prev => ({ ...prev, name: 'Enter title!' }));\n    }\n\n    if (!newComment.body.trim()) {\n      setNewCommentError(prev => ({ ...prev, body: 'Enter comment!' }));\n    }\n\n    if (!newComment.email.trim()) {\n      setNewCommentError(prev => ({ ...prev, email: 'Enter email!' }));\n    }\n\n    const validComment = Object.values(newComment)\n      .every(item => String(item).trim());\n    const validErrors = Object.values(newCommentError).some(item => item);\n\n    if (validComment && !validErrors) {\n      dispatch(addCommentInSelectedPost(newComment));\n      setNewComment(initialState);\n    }\n  }, [newComment, newCommentError]);\n\n  return (\n    <>\n      {!isUploadComment\n        ? (\n          <form\n            className=\"NewCommentForm\"\n            onSubmit={catchSubmit}\n          >\n            <div className=\"form-field\">\n              <input\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Your name\"\n                className=\"NewCommentForm__input\"\n                onChange={catchInpChange}\n                value={newComment.name}\n              />\n              {newCommentError.name && (\n                <p className=\"error-message\">{newCommentError.name}</p>\n              )}\n            </div>\n\n            <div className=\"form-field\">\n              <input\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Your email\"\n                className=\"NewCommentForm__input\"\n                onChange={catchInpChange}\n                value={newComment.email}\n              />\n              {newCommentError.email && (\n                <p className=\"error-message\">{newCommentError.email}</p>\n              )}\n            </div>\n\n            <div className=\"form-field\">\n              <textarea\n                name=\"body\"\n                placeholder=\"Type comment here\"\n                className=\"NewCommentForm__input\"\n                onChange={catchInpChange}\n                value={newComment.body}\n              />\n              {newCommentError.body && (\n                <p className=\"error-message\">{newCommentError.body}</p>\n              )}\n\n            </div>\n\n            <button\n              type=\"submit\"\n              className=\"NewCommentForm__submit-button button\"\n            >\n              Add a comment\n            </button>\n          </form>\n        )\n        : (\n          <>\n            <h2>\n              Updating data\n            </h2>\n            <Loader />\n          </>\n        )}\n    </>\n  );\n};\n","import {\n  memo,\n  useEffect,\n} from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport {\n  selectors,\n  fetchPostDetails,\n  setCommentsIsShowing,\n  removeCommentInSelectedPostById,\n} from '../../store/postDetailsSlice';\nimport {\n  useAppDispatch,\n  useAppSelector,\n} from '../../typedHooks/hooks';\nimport { Loader } from '../Loader';\n\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = memo(({\n  selectedPostId,\n}) => {\n  const dispatch = useAppDispatch();\n\n  const selectedPostDetails = useAppSelector(selectors.getSelectedPostDetails);\n  const commentsForSelectedPost\n    = useAppSelector(selectors.getCommentsForSelectedPost);\n  const commentsIsShowing = useAppSelector(selectors.getCommentsIsShowing);\n  const someCommentIsDeleting\n    = useAppSelector(selectors.getSomeCommentIsDeleting);\n\n  useEffect(() => {\n    dispatch(fetchPostDetails(selectedPostId));\n  }, [selectedPostId]);\n\n  return (\n    <>\n      {selectedPostDetails && (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{selectedPostDetails?.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                dispatch(setCommentsIsShowing(!commentsIsShowing));\n              }}\n            >\n              {`${commentsIsShowing ? 'Hide' : 'Show'} ${commentsForSelectedPost.length} comments`}\n            </button>\n\n            {(commentsIsShowing && commentsForSelectedPost.length > 0) && (\n              <ul className=\"PostDetails__list\">\n                {commentsForSelectedPost.map(comment => (\n                  <li className=\"PostDetails__list-item\" key={comment.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => {\n                        dispatch(removeCommentInSelectedPostById(comment.id));\n                      }}\n                    >\n                      {someCommentIsDeleting ? <Loader /> : 'X'}\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                selectedPostId={selectedPostId}\n              />\n            </div>\n          </section>\n        </div>\n      )}\n      {!selectedPostDetails && (\n        <Loader />\n      )}\n    </>\n  );\n});\n","// there I imported rootState from store because i use it in selectors for this inner state\n\n/* eslint-disable import/no-cycle */\n\n// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\n\n/* eslint-disable no-param-reassign */\n\n// i use action before initialization in thunk so i need it to off warning of linter\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '.';\nimport { getUsersPosts, getUserPostsById } from '../api/posts';\nimport { Post } from '../types/Post';\n\ninterface ListOfPostsState {\n  selectedPostId: number;\n  posts: Array<Post> | null;\n  isPostListLoading: boolean;\n  filterByUserId: number;\n}\n\nconst initialState: ListOfPostsState = {\n  selectedPostId: 0,\n  posts: null,\n  isPostListLoading: false,\n  filterByUserId: 0,\n};\n\nexport const fetchUserPostsById = createAsyncThunk(\n  'listOfPosts/fetchUserPostsById',\n  async (userId: number, thunkAPI) => {\n    const { dispatch } = thunkAPI;\n\n    dispatch(setIsPostListLoading(true));\n    let response;\n\n    if (userId === 0) {\n      response = await getUsersPosts();\n    } else {\n      response = await getUserPostsById(userId);\n    }\n\n    dispatch(setIsPostListLoading(false));\n\n    return response;\n  },\n);\n\nexport const listOfPosts = createSlice({\n  name: 'listOfPosts',\n  initialState,\n  reducers: {\n    setSelectedPostId: (state, action: PayloadAction<number>) => {\n      state.selectedPostId = action.payload;\n    },\n    setFilterByUserId: (state, action: PayloadAction<number>) => {\n      state.filterByUserId = action.payload;\n    },\n    setIsPostListLoading: (state, action: PayloadAction<boolean>) => {\n      state.isPostListLoading = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchUserPostsById.fulfilled, (state, action) => {\n      state.posts = action.payload;\n    });\n  },\n});\n\nexport const {\n  setSelectedPostId,\n  setFilterByUserId,\n  setIsPostListLoading,\n} = listOfPosts.actions;\n\nexport const selectors = {\n  getPosts: (state: RootState) => state.listOfPosts.posts,\n  getSelectedPostId: (state: RootState) => state.listOfPosts.selectedPostId,\n  getIsPostListLoading: (state: RootState) => {\n    return state.listOfPosts.isPostListLoading;\n  },\n  getFilterByUserId: (state: RootState) => state.listOfPosts.filterByUserId,\n};\n\nexport default listOfPosts.reducer;\n","import React, {\n  useCallback,\n  useEffect,\n} from 'react';\n\nimport {\n  fetchUserPostsById,\n  selectors,\n  setSelectedPostId,\n  setFilterByUserId,\n} from '../../store/listOfPostsSlice';\nimport {\n  useAppDispatch,\n  useAppSelector,\n} from '../../typedHooks/hooks';\n\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\nexport const PostsList: React.FC<{}> = React.memo(() => {\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(fetchUserPostsById(0));\n  }, []);\n\n  const posts = useAppSelector(selectors.getPosts);\n  const isPostListLoading = useAppSelector(selectors.getIsPostListLoading);\n  const filterByUserId = useAppSelector(selectors.getFilterByUserId);\n  const selectedPostId = useAppSelector(selectors.getSelectedPostId);\n\n  const selectCommentBtnClickHandler = useCallback((postId: number) => {\n    if (selectedPostId === postId) {\n      dispatch(setSelectedPostId(0));\n\n      return;\n    }\n\n    dispatch(setSelectedPostId(postId));\n  }, [selectedPostId]);\n\n  return (\n    <>\n      <header className=\"PostsList__filter-props-block\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={filterByUserId}\n            onChange={({ target }) => {\n              dispatch(fetchUserPostsById(+target.value));\n              dispatch(setFilterByUserId(+target.value));\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      {!posts ? (\n        <h2>\n          No one posts is avalible\n        </h2>\n      )\n        : (\n          <div className=\"PostsList\">\n            <h2>Posts:</h2>\n\n            <ul className=\"PostsList__list\">\n              {posts.map((post) => (\n                <li\n                  key={post.id}\n                  className=\"PostsList__item\"\n                >\n                  <div>\n                    <b>\n                      [User #\n                      {post.userId}\n                      ]:\n                    </b>\n                    {post.title}\n                  </div>\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => {\n                      selectCommentBtnClickHandler(post.id);\n                    }}\n                  >\n                    {selectedPostId === post.id\n                      ? 'Close'\n                      : 'Open'}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      {isPostListLoading && (\n        <Loader />\n      )}\n    </>\n  );\n});\n","import { FC } from 'react';\nimport { PostDetails } from './components/PostDetails';\nimport { PostsList } from './components/PostsList';\nimport { useAppSelector } from './typedHooks/hooks';\nimport { selectors } from './store/listOfPostsSlice';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App: FC<{}> = () => {\n  const selectedPostId = useAppSelector(selectors.getSelectedPostId);\n\n  return (\n    <div className=\"App\">\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n        {!!selectedPostId && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","/* eslint-disable import/no-cycle */\nimport { configureStore } from '@reduxjs/toolkit';\nimport listOfPostsReduser from './listOfPostsSlice';\nimport postDetailsReducer from './postDetailsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    listOfPosts: listOfPostsReduser,\n    postDetails: postDetailsReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\n// eslint-disable-next-line import/no-named-as-default\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}